AWSTemplateFormatVersion: 2010-09-09
Description: VPC spanning 1-3 AZs with 1 private subnet and 1 public subnet per AZ and one NAT Gateway for the whole VPC.
Parameters:
  Name:
    Type: String
    Description: Name of the VPC
  CIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR of the VPC
  NumberOfAZs:
    Type: String
    AllowedValues:
      - 1
      - 2
      - 3
Conditions:
  UseAZ1: !Or [ !Equals [ !Ref NumberOfAZs, 1 ], !Equals [ !Ref NumberOfAZs, 2 ], !Equals [ !Ref NumberOfAZs, 3 ] ]
  UseAZ2: !Or [ !Equals [ !Ref NumberOfAZs, 2 ], !Equals [ !Ref NumberOfAZs, 3 ] ]
  UseAZ3: !Equals [ !Ref NumberOfAZs, 3 ]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref Name
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Name
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: UseAZ1
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 0, !Cidr [ !Ref CIDR, 16, 8 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-b"
  PrivateSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: UseAZ2
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 1, !Cidr [ !Ref CIDR, 16, 8 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-b"
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ2
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: UseAZ3
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Select [ 2, !Cidr [ !Ref CIDR, 16, 8 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-c"
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ3
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private"
      VpcId: !Ref VPC
  PrivateRouteTableNAT:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NAT
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Condition: UseAZ1
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 8, !Cidr [ !Ref CIDR, 16, 8 ] ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-a"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: UseAZ2
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 9, !Cidr [ !Ref CIDR, 16, 8 ] ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-b"
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: UseAZ3
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Select [ 10, !Cidr [ !Ref CIDR, 16, 8 ] ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-c"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public"
      VpcId: !Ref VPC
  PublicSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ3
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
  PublicRouteTableIGW:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  NAT:
     Type: AWS::EC2::NatGateway
     Properties:
        AllocationId: !GetAtt NatGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnetA
        Tags:
          - Key: Name
            Value: !Sub "${Name}"
  NatGatewayEIP:
     DependsOn: AttachInternetGateway
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc
Outputs:
  VPCId:
    Value: !Ref VPC
  PrivateSubnetA:
    Condition: UseAZ1
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Condition: UseAZ2
    Value: !Ref PrivateSubnetB
  PrivateSubnetC:
    Condition: UseAZ3
    Value: !Ref PrivateSubnetC
  PublicSubnetA:
    Condition: UseAZ1
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Condition: UseAZ2
    Value: !Ref PublicSubnetB
  PublicSubnetC:
    Condition: UseAZ3
    Value: !Ref PublicSubnetC